


Dependency Injection (giving) decouples the creation of dependencies from the business logic, allowing for more flexible, maintainable, and testable code. 
It is a design pattern where a class receives its dependencies from an external source rather than creating them itself.
A dependency is an external piece of code, library, service, or object that a piece of software needs to function correctly.
Dependencies can be internal (within the same project) or external (third-party libraries)
In basic terms, one peice of code references/interacts with other pieces of code, usually in a differnet class, different controller, etc.



// SAMPLE CODE


// the MyEmailController controller
// this controller is where you would put
// your code that sends an email
namespace MyEmailController.Controllers
{
  public class EmailController : Controller
  {
    [HttpPost]
    public async Task<IActionResult> SendEmail()
    {
      var retval = "email sent";

      try
      {
		// your code to send an email message
		// your code to send an email message
		// your code to send an email message
		// your code to send an email message
      }
      catch (Exception ex)
      {
        retval = ex.Message;
        return Content(retval);
      }
    }
  }
}



// the MainController controller
// this controller is where you would put
// your code that calls the sends an email
namespace MyMain.Controllers
{
  public class MainController : Controller
  {
    private EmailController? _sendemail; // define _sendemail

    [HttpPost]
    public async Task<IActionResult> Main()
    {
      var retval = "SendEmail call successfull";

      try
      {
		// your code to reference the EmailController in the MyEmailController controller

        _sendemail = new EmailController(); // instantiate _sendemail variable as EmailController
        await _sendemail.SendEmail(); // call SendEmail in  EmailController (_sendemail)
      }
      catch (Exception ex)
      {
        retval = ex.Message;
        return Content(retval);
      }
    }
  }
}
